#!/bin/sh -e
#
# Do a DOSB build with a container from GHCR.
#
#BEGIN-HELP
# Usage:  build [ OPTIONS ] BUILD-DIR CONTAINER-OS
#
# Arguments (see README.md for more information):
#     BUILD-DIR is the build directory
#     CONTAINER-OS is one of el{7,8,9}, d10, u{18,20}
#
# Options:
#     --absolute  Take CONTAINER-OS as the full name of a container
#     --command   Show the docker run command to run the container
#     --name N    Name the container 'N'
#     --no-halt   Don't halt the container when the build finishes
#     --run S     Copy script S into the container and run it from
#                   the build area instead of the default 'make'.
#END-HELP
#

set -e

WHOAMI=$(basename "$0")

die()
{
    echo "$@" 1>&2
    exit 1
}


self_help()
{
    sed -e '1,/^#BEGIN-HELP/d ; /^#END-HELP/,$d ; s/^#\s\{0,1\}//' "$0"
    exit ${1:-0}
}


# Gargle the arguments

ABSOLUTE=false
while echo "$1" | egrep -q -e '^--'
do
    OPTION=$1
    shift

    case "${OPTION}" in

	--help)
	    self_help
	    ;;

	--absolute)
	    ABSOLUTE=true
	    ;;

	--command)
	    ECHO=echo
	    ;;

	--name)
	    NAME_ARG="--name $1"
	    shift
	    ;;

	--no-halt)
	    NO_HALT="--env BUILD_NO_HALT=1"
	    ;;

	--run)
	    RUN_ARG=$1
	    shift
	    ;;

	--*)
	    die "Unknown option ${OPTION}."
	    ;;
    esac
done

[ "$#" -eq 2 ] \
    || self_help 1

[ -z "${RUN_ARG}" -o -f "${RUN_ARG}" ] \
    || die "Can't find script '${RUN_ARG}'"


# Build directory

BUILD_DIR="$1"
[ -d "$1" -a -w "$1" ] \
    || die "${BUILD_DIR} is not a writable directory."
echo "${BUILD_DIR}" | fgrep -q ':' \
    && die "Build directory cannot contain colons."
BUILD_DIR=$(cd "${BUILD_DIR}" && pwd)


# Run script, stored in the DOSB-specific area

PRODUCTS="${BUILD_DIR}/DOSB"
rm -rf "${PRODUCTS}"

if [ -s "${RUN_ARG}" ]
then

    mkdir -p "${PRODUCTS}"

    BUILD_RUN="${PRODUCTS}/build-script"
    cp "${RUN_ARG}" "${BUILD_RUN}"
    chmod +x "${BUILD_RUN}"
fi


# Container name

if ${ABSOLUTE}
then
    CONTAINER="$2"
else
    CONTAINER="ghcr.io/perfsonar/docker-oneshot-builder/$2:latest"
    PULL_ARG="--pull always"
fi


# Permission args

OS=$(uname -s)
case "${OS}" in
    Linux)
	if [ -d '/sys/fs/cgroup/cgroup.controllers' ]
	then
	    # Cgroups v2
	    PERM_ARGS="--volume /sys/fs/cgroup:/sys/fs/cgroup:ro"
	else
	    PERM_ARGS="--privileged"
	fi
    ;;
    Darwin)
	PERM_ARGS="--privileged"
    ;;
    *)
	die "No support for ${OS}" 1>&2
	exit 1
esac


# Make it happen

if [ "$(id -u)" -ne 0 ]
then
    SUDO=sudo
fi

STATUS=0
${ECHO} ${SUDO} docker run \
	${NAME_ARG} \
	${PULL_ARG} \
	--tty \
	--tmpfs /tmp:exec \
	--tmpfs /run:exec \
	--volume "${BUILD_DIR}:/build" \
	${NO_HALT} \
	--rm \
	${PERM_ARGS} \
	"${CONTAINER}" \
    || STATUS=$?

# Docker exits with a 130 when systemd is stopped with SIGINT (halt).
# Anything else was a container problem, not a result of the build.
[ $STATUS -eq 0 -o $STATUS -eq 130 ] || false

# Check on the status of the build
STATUS_FILE="${BUILD_DIR}/DOSB/status"

[ -e "${STATUS_FILE}" ] || die "Build produced no status."

BUILD_STATUS=$(cat "${STATUS_FILE}")
if [ "${BUILD_STATUS}" -ne 0 ]
then
    echo "Build failed" 1>&2
    exit "${BUILD_STATUS}"
fi
